plugins {
    id 'org.springframework.boot' version '2.4.0'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id "org.asciidoctor.convert" version "1.5.9.2"
    id 'java'
}

group = 'com.moseory'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    p6spyVersion = '1.5.6'
    randomBeansVersion = '3.9.0'
}

// asciidoctor Task 설정
asciidoctor {
    dependsOn test
}

/* bootJar Task 설정
생성된 jar 파일에 static 문서들을 넣을 때 사용
 */
bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

dependencies {
    /* A <- B <- C (모듈의 의존 구조) C는 B를 B는 A를 의존하고있다. */

    /* implementation
        A라는 모듈을 수정하게 되면, 이 모듈을 직접 의존하고 있는 B만 재빌드한다.

        - 빠른 컴파일이 가능한다
        - C 에서는 A에 접근할수 없다. (A의 API가 노출되지 않는다.)
     */
    implementation(
            'javax.validation:validation-api',
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'org.springframework.boot:spring-boot-starter-validation',
            "com.github.gavlyukovskiy:p6spy-spring-boot-starter:${p6spyVersion}",
            'com.querydsl:querydsl-jpa'
    )

    developmentOnly(
            'org.springframework.boot:spring-boot-devtools'
    )

    runtimeOnly(
            'com.h2database:h2'
    )

    annotationProcessor(
            'org.projectlombok:lombok'
    )

    compileOnly(
            'org.projectlombok:lombok'
    )

    asciidoctor(
            // *.adoc 파일의 {snippets}를 자동으로 설정
            'org.springframework.restdocs:spring-restdocs-asciidoctor'
    )

    testCompile(
            'org.springframework.boot:spring-boot-starter-test',
            "io.github.benas:random-beans-randomizers:${randomBeansVersion}"
    )

    testImplementation(
            // MockMvc 에 rest docs 추가하기
            'org.springframework.restdocs:spring-restdocs-mockmvc'
    )

}

test {
    useJUnitPlatform()
}

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main.java.srcDir querydslDir
}

configurations {
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}